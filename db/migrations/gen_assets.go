// +build ignore

package main

import (
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"text/template"
)

var dbDialects = [...]string{"Postgres", "MySQL"}

var funcs = template.FuncMap{
	"quote": strconv.Quote,
}

var tmpl = template.Must(template.New("assets.go").Delims("{%", "%}").Funcs(funcs).Parse(`package migrations

// THIS FILE WAS GENERATED BY gen.go DO NOT EDIT

import "github.com/rubenv/sql-migrate"

var {% .DatabaseDialect %}Migrations migrate.MigrationSource = &migrate.MemoryMigrationSource{
	Migrations: []*migrate.Migration{{% range $i, $m := .Migrations %}
		{
			Id: {% $m.Name | quote %},
			Up: []string{
				{% $m.Data | quote %},
			},
		},{% end %}
	},
}
`))

type databaseMigration struct {
	DatabaseDialect string
	Migrations []migration
}

// A single database migration.
type migration struct {
	Name string
	Data string
}

func init() {
	log.SetPrefix("gen_assets: ")
	log.SetFlags(0)
}

func main() {
	
	for _, dialect := range dbDialects {
		lowerDialect := strings.ToLower(dialect)
		files, err := filepath.Glob(fmt.Sprintf("%s/*.sql", lowerDialect))
		if err != nil {
			log.Fatalf("finding sql files: %v", err)
		}
		sort.Strings(files)

		var dbMigration databaseMigration
		dbMigration.DatabaseDialect = dialect
		dbMigration.Migrations = make([]migration, len(files))
		for i, f := range files {
			data, err := ioutil.ReadFile(f)
			if err != nil {
				log.Fatalf("reading file: %v", err)
			}
			dbMigration.Migrations[i] = migration{f, string(data)}
		}

		assetsFile := fmt.Sprintf("%s_assets.go", lowerDialect) 
		f, err := os.OpenFile(assetsFile, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
		if err != nil {
			log.Fatalf("creating file: %v", err)
		}
		defer f.Close()
		
		if err := tmpl.Execute(f, dbMigration); err != nil {
			log.Fatal(err)
		}
	}
}
